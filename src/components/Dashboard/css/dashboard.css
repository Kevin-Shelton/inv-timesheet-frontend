import React, { useState, useEffect } from 'react';
import { supabase } from '../../supabaseClient';
import ActivityRing from './ActivityRing';
import CurrentTime from './CurrentTime';
import HolidaySection from './HolidaySection';
import WeeklyChart from './WeeklyChart';
import WelcomeCard from './WelcomeCard';
import ProjectsChart from './ProjectsChart';
import WhoIsInOutPanel from './WhoIsInOutPanel';
import DashboardHeader from './DashboardHeader';

// Import the modular CSS
import '../../css/dashboard.css';

const Dashboard = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [currentTime, setCurrentTime] = useState(new Date());
  const [trackedHours, setTrackedHours] = useState({
    worked: '0h 0m',
    breaks: '0h 0m',
    overtime: '0h 0m'
  });

  // Load user data and profile
  useEffect(() => {
    const loadUserData = async () => {
      try {
        setLoading(true);
        
        // Get authenticated user
        const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
        
        if (authError) {
          throw authError;
        }

        if (authUser) {
          // Get user profile with role and other details
          const { data: profile, error: profileError } = await supabase
            .from('users')
            .select(`
              id,
              full_name,
              email,
              role,
              employment_type,
              is_exempt,
              pay_type,
              status,
              department,
              job_title,
              hire_date
            `)
            .eq('id', authUser.id)
            .single();

          if (profileError) {
            console.error('Error loading user profile:', profileError);
            // Set basic user data if profile fetch fails
            setUser({
              id: authUser.id,
              email: authUser.email,
              full_name: authUser.user_metadata?.full_name || 'User',
              role: 'employee' // Default role
            });
          } else {
            setUser({
              ...authUser,
              ...profile
            });
          }
        }
      } catch (error) {
        console.error('Error loading user data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadUserData();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_OUT') {
          setUser(null);
        } else if (event === 'SIGNED_IN' && session?.user) {
          loadUserData();
        }
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  // Update time every minute
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 60000);

    return () => clearInterval(timer);
  }, []);

  // Sample data for activities
  const activitiesData = [
    { name: 'General', time: '0h 0m', color: '#FB923C' },
    { name: 'Development', time: '0h 0m', color: '#3B82F6' },
    { name: 'Meetings', time: '0h 0m', color: '#10B981' }
  ];

  // Sample data for projects
  const projectsData = [
    { name: 'Website Redesign', time: '0h 0m', color: '#8B5CF6' },
    { name: 'Mobile App', time: '0h 0m', color: '#F59E0B' },
    { name: 'API Integration', time: '0h 0m', color: '#EF4444' }
  ];

  // Check if user is admin
  const isAdmin = user?.role === 'admin' || user?.role === 'administrator';

  // Show loading state
  if (loading) {
    return (
      <div className="dashboard-reference-layout">
        <div className="dashboard-loading">
          <div className="loading-spinner"></div>
          <p>Loading dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard-reference-layout">
      {/* Dashboard Header */}
      <DashboardHeader user={user} />

      {/* Admin Notice (if admin user) */}
      {isAdmin && (
        <div className="admin-notice">
          <strong>ðŸ‘‘ Admin User Detected:</strong> Admin panel will be available after completing the overtime system setup.
          <br />
          <small>User: {user?.full_name} ({user?.email}) - Role: {user?.role?.toUpperCase()}</small>
        </div>
      )}

      {/* Header Section - Two Columns */}
      <div className="dashboard-header-section">
        {/* Hello Section with User Data */}
        <div className="hello-section">
          <div className="hello-content">
            <h1 className="hello-title">
              Hello {user?.full_name?.split(' ')[0] || 'User'}
            </h1>
            <p className="hello-subtitle">
              Here's what's happening at<br />
              {user?.department || 'Your Organization'}
            </p>
            {user?.job_title && (
              <p className="user-role">{user.job_title}</p>
            )}
          </div>
          <div className="hello-illustration">
            <div className="illustration-container">
              <div className="jibble-logo">
                <span className="logo-text">Î£</span>
              </div>
              <div className="person-illustration">
                <div className="person-figure"></div>
              </div>
            </div>
          </div>
        </div>

        {/* Upcoming Holidays Section */}
        <HolidaySection user={user} />
      </div>

      {/* Main Content - Three Columns + Right Sidebar */}
      <div className="dashboard-main-content">
        {/* Left Content Area - Three Columns */}
        <div className="dashboard-left-content">
          {/* Tracked Hours Section */}
          <div className="tracked-hours-section">
            <div className="section-header">
              <h3 className="section-title">TRACKED HOURS</h3>
              <button className="section-link">Go to timesheets</button>
            </div>
            
            <div className="hours-legend">
              <div className="legend-item">
                <div className="legend-dot worked"></div>
                <span className="legend-label">WORKED HOURS</span>
                <span className="legend-value">{trackedHours.worked}</span>
              </div>
              <div className="legend-item">
                <div className="legend-dot break"></div>
                <span className="legend-label">BREAKS</span>
                <span className="legend-value">{trackedHours.breaks}</span>
              </div>
              <div className="legend-item">
                <div className="legend-dot overtime"></div>
                <span className="legend-label">OVERTIME HOURS</span>
                <span className="legend-value">{trackedHours.overtime}</span>
              </div>
            </div>

            <WeeklyChart user={user} />
            
            <p className="chart-note">Does not include manually added time entries</p>
          </div>

          {/* Activities Section */}
          <div className="activities-section">
            <div className="section-header">
              <h3 className="section-title">ACTIVITIES</h3>
              <button className="section-link">View all</button>
            </div>
            
            <div className="activities-content">
              <ActivityRing 
                percentage={30} 
                color="#FB923C"
                label="TODAY"
                time="0h 0m"
                user={user}
              />
              
              <div className="activities-list">
                <h4 className="activities-list-title">Most tracked activities</h4>
                <div className="activity-items">
                  {activitiesData.map((activity, index) => (
                    <div key={index} className="activity-item">
                      <div 
                        className="activity-dot" 
                        style={{ backgroundColor: activity.color }}
                      ></div>
                      <span className="activity-name">{activity.name}</span>
                      <span className="activity-time">{activity.time}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Projects Section */}
          <div className="projects-section">
            <div className="section-header">
              <h3 className="section-title">PROJECTS</h3>
              <button className="section-link">View all</button>
            </div>
            
            <div className="projects-content">
              <ActivityRing 
                percentage={20} 
                color="#8B5CF6"
                label="TODAY"
                time="0h 0m"
                user={user}
              />
              
              <div className="projects-list">
                <h4 className="projects-list-title">Most tracked projects</h4>
                <div className="project-items">
                  {projectsData.map((project, index) => (
                    <div key={index} className="project-item">
                      <div 
                        className="project-dot" 
                        style={{ backgroundColor: project.color }}
                      ></div>
                      <span className="project-name">{project.name}</span>
                      <span className="project-time">{project.time}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Right Sidebar */}
        <div className="dashboard-right-sidebar">
          {/* Who's in/out Section */}
          <div className="whos-inout-section">
            <div className="section-header">
              <h3 className="section-title">Who's in/out</h3>
              <span className="member-count">1 member</span>
            </div>
            
            <div className="inout-stats">
              <div className="stat-item">
                <span className="stat-number in">0</span>
                <span className="stat-label">IN</span>
              </div>
              <div className="stat-item">
                <span className="stat-number break">0</span>
                <span className="stat-label">BREAK</span>
              </div>
              <div className="stat-item">
                <span className="stat-number out">1</span>
                <span className="stat-label">OUT</span>
              </div>
            </div>

            <div className="search-members">
              <input 
                type="text" 
                placeholder="Search members..." 
                className="member-search-input"
              />
            </div>

            {/* Enhanced Who's In/Out Panel */}
            <WhoIsInOutPanel user={user} />
          </div>

          {/* Time Section */}
          <CurrentTime currentTime={currentTime} user={user} />
        </div>
      </div>

      {/* Inline styles for loading and admin notice */}
      <style jsx>{`
        .dashboard-loading {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          min-height: 400px;
          background-color: #F9FAFB;
        }

        .loading-spinner {
          width: 40px;
          height: 40px;
          border: 4px solid #FB923C;
          border-top: 4px solid transparent;
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 16px;
        }

        .dashboard-loading p {
          color: #6B7280;
          font-size: 14px;
          margin: 0;
        }

        .admin-notice {
          background-color: #FEF3C7;
          border: 1px solid #F59E0B;
          border-radius: 8px;
          padding: 12px 16px;
          margin: 16px 24px;
          font-size: 14px;
          color: #92400E;
        }

        .user-role {
          font-size: 14px;
          color: #666;
          margin: 4px 0 0 0;
          font-style: italic;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

export { Dashboard };

